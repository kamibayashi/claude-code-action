# Optimized GitLab CI configuration for Claude Code Action
# This example includes performance and reliability improvements

variables:
  # Docker image with pre-installed tools for faster startup
  CLAUDE_ACTION_IMAGE: "node:20-alpine"

  # Performance settings
  NODE_OPTIONS: "--max-old-space-size=4096" # 4GB memory for Node.js
  BUN_RUNTIME_TRANSPILER_CACHE_PATH: ${CI_PROJECT_DIR}/.bun-cache

  # Concurrent job control
  CI_CONCURRENT_PROJECT_ID: "claude-${CI_PROJECT_ID}"

# Shared cache configuration
.cache_config: &cache_config
  cache:
    key:
      files:
        - package.json
        - bun.lockb
      prefix: "${CI_COMMIT_REF_SLUG}-claude"
    paths:
      - node_modules/
      - .bun-cache/
      - ~/.bun/install/cache/
    policy: pull-push
    unprotect: true

# Base Claude action job with optimizations
.claude_action_optimized:
  image: $CLAUDE_ACTION_IMAGE
  <<: *cache_config

  # Resource management
  resource_group: claude_${CI_PROJECT_ID} # Prevent concurrent Claude runs
  timeout: 30 minutes
  retry:
    max: 1
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

  # Artifacts configuration
  artifacts:
    name: "claude-${CI_COMMIT_SHORT_SHA}-${CI_JOB_ID}"
    paths:
      - prompt.txt
      - mcp_config.json
      - claude_output.json
      - prepare.log
    exclude:
      - "**/node_modules/**"
      - "**/.git/**"
    expire_in: 1 week
    when: always

  before_script:
    # Performance: Install dependencies efficiently
    - apk add --no-cache git curl bash jq

    # Install Bun with caching
    - |
      if ! command -v bun &> /dev/null; then
        curl -fsSL https://bun.sh/install | bash
        export PATH="$HOME/.bun/bin:$PATH"
      else
        echo "Bun already installed"
      fi

    # Clone Claude Code Action (shallow clone for speed)
    - |
      if [ ! -d "/tmp/claude-action/.git" ]; then
        git clone --depth 1 https://github.com/anthropics/claude-code-action.git /tmp/claude-action
      else
        cd /tmp/claude-action && git pull
      fi

    - cd /tmp/claude-action

    # Install dependencies with lockfile
    - bun install --frozen-lockfile

    # Make scripts executable
    - chmod +x src/entrypoints/prepare.ts src/entrypoints/update-comment-link.ts

  script:
    # Set up error handling
    - set -euo pipefail

    # Export required environment variables
    - export GIT_PROVIDER="gitlab"
    - export OUTPUT_FILE="${CI_PROJECT_DIR}/claude_output.json"

    # Prepare step with proper error handling
    - |
      echo "Running prepare step..."
      if bun run src/entrypoints/prepare.ts 2>&1 | tee prepare.log; then
        export PREPARE_SUCCESS=true
        echo "Prepare step completed successfully"
      else
        export PREPARE_SUCCESS=false
        export PREPARE_ERROR=$(tail -n 100 prepare.log | jq -Rs .)
        echo "Prepare step failed"
        exit 1
      fi

    # Run Claude if prepare succeeded
    - |
      if [ "$PREPARE_SUCCESS" = "true" ] && [ -f "${CI_PROJECT_DIR}/prompt.txt" ]; then
        echo "Running Claude Code..."
        
        # Use appropriate provider based on configuration
        PROVIDER="${CLAUDE_PROVIDER:-anthropic}"
        
        # Install claude-code-runner if not available
        if ! command -v claude-code-runner &> /dev/null; then
          npm install -g @anthropic/claude-code-runner
        fi
        
        # Run with timeout and capture exit code
        timeout 25m claude-code-runner \
          --prompt-file="${CI_PROJECT_DIR}/prompt.txt" \
          --output-file="$OUTPUT_FILE" \
          --provider="$PROVIDER" \
          --mcp-config-file="${CI_PROJECT_DIR}/mcp_config.json" || CLAUDE_EXIT_CODE=$?
        
        if [ "${CLAUDE_EXIT_CODE:-0}" -eq 0 ]; then
          export CLAUDE_SUCCESS=true
          echo "Claude Code completed successfully"
        else
          export CLAUDE_SUCCESS=false
          echo "Claude Code failed with exit code: ${CLAUDE_EXIT_CODE}"
        fi
      else
        echo "Skipping Claude Code execution"
        export CLAUDE_SUCCESS=false
      fi

  after_script:
    # Always try to update the comment, even if the job failed
    - cd /tmp/claude-action
    - |
      export OUTPUT_FILE="${CI_PROJECT_DIR}/claude_output.json"
      bun run src/entrypoints/update-comment-link.ts || echo "Failed to update comment"

    # Cleanup to save space
    - rm -rf /tmp/claude-action/node_modules

  variables:
    # Provider detection
    GIT_PROVIDER: "gitlab"

    # Authentication
    ANTHROPIC_API_KEY: "$ANTHROPIC_API_KEY"
    GITLAB_TOKEN: "${GITLAB_TOKEN:-$CI_JOB_TOKEN}"

    # Model configuration
    CLAUDE_MODEL: "${CLAUDE_MODEL:-claude-3-5-sonnet-latest}"
    CLAUDE_PROVIDER: "${CLAUDE_PROVIDER:-anthropic}" # or "bedrock", "vertex"

    # Default configuration
    TRIGGER_PHRASE: "${TRIGGER_PHRASE:-@claude}"
    ALLOWED_TOOLS: "${ALLOWED_TOOLS:-}"
    DISALLOWED_TOOLS: "${DISALLOWED_TOOLS:-}"
    CUSTOM_INSTRUCTIONS: "${CUSTOM_INSTRUCTIONS:-}"

    # Git configuration for better performance
    GIT_DEPTH: "1"
    GIT_STRATEGY: "fetch"
    GIT_CLEAN_FLAGS: "-ffdx -e .cache"

# Trigger on merge request events
claude_on_mr:
  extends: .claude_action_optimized
  rules:
    # Automatic trigger on MR comments with trigger phrase
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
    # Manual trigger
    - when: manual
      allow_failure: true
  variables:
    CI_MERGE_REQUEST_IID: "${CI_MERGE_REQUEST_IID}"

# Trigger on issue comments (requires webhook)
claude_on_issue:
  extends: .claude_action_optimized
  rules:
    - if: '$ISSUE_TRIGGER == "true"'
      when: always
    - when: manual
      allow_failure: true
  variables:
    GITLAB_ISSUE_IID: "${ISSUE_IID}"

# Scheduled analysis with custom prompt
claude_scheduled:
  extends: .claude_action_optimized
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
  variables:
    DIRECT_PROMPT: |
      Review the codebase for:
      1. Security vulnerabilities
      2. Performance issues
      3. Code quality improvements
      4. Outdated dependencies
      Provide a summary report with actionable recommendations.

# Quick analysis for feature branches
claude_quick_check:
  extends: .claude_action_optimized
  image: node:20-alpine # Lightweight image
  timeout: 10 minutes # Shorter timeout
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: manual
      allow_failure: true
  variables:
    DIRECT_PROMPT: "Quick review of the latest changes. Focus on obvious issues and code style."
    ALLOWED_TOOLS: "Read,Grep" # Limit tools for faster execution

# Production-ready configuration with enhanced security
claude_production:
  extends: .claude_action_optimized
  rules:
    - if: '$CI_COMMIT_PROTECTED == "true"'
      when: manual
      allow_failure: false
  environment:
    name: production
    action: access
  variables:
    # Use masked variables for production
    ANTHROPIC_API_KEY: "$ANTHROPIC_API_KEY_PROD"
    GITLAB_TOKEN: "$GITLAB_TOKEN_PROD"
    # Enhanced instructions for production
    CUSTOM_INSTRUCTIONS: |
      This is a production environment review. Pay special attention to:
      - Security vulnerabilities
      - Data privacy concerns
      - Performance regressions
      - Breaking changes
      Be extra cautious with any recommendations.

# Parallel analysis for large codebases
claude_parallel_analysis:
  extends: .claude_action_optimized
  parallel:
    matrix:
      - ANALYSIS_FOCUS: ["security", "performance", "quality", "dependencies"]
  variables:
    CUSTOM_INSTRUCTIONS: "Focus your analysis on ${ANALYSIS_FOCUS} aspects only."
  script:
    # Override script to include focus area
    - !reference [.claude_action_optimized, script]
    - echo "Analysis completed for ${ANALYSIS_FOCUS}"

# Debug job for troubleshooting
claude_debug:
  extends: .claude_action_optimized
  rules:
    - when: manual
      allow_failure: true
  variables:
    # Enable debug logging
    DEBUG: "claude:*"
    NODE_ENV: "development"
  script:
    # Check environment
    - echo "=== Environment Check ==="
    - env | grep -E "(CLAUDE|GITLAB|CI_)" | sort
    - echo "=== Runner Capabilities ==="
    - uname -a
    - node --version
    - bun --version
    - git --version
    - echo "=== Continue with normal execution ==="
    - !reference [.claude_action_optimized, script]
